"""This is the main script for generating spectrograms for a given training data set.

:param path: root path of the spectrogram data set
:param colormap: matplotlib colormap used for spectrogram generation
:param resolution: Target resolution of the generated spectrogram images (e.g., -r 896 128 )
"""

import argparse
import shutil
from pathlib import Path
from tqdm import tqdm  # progress bar

from generator import make_spectrograms, Resolution
from directory_manager import DirectoryManager
from sample_files_list import SampleFileList

parser = argparse.ArgumentParser(
    description="Generate spectrogram images from the time signal sample files. ",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument(
    "-p",
    "--path",
    type=Path,
    required=True,
    help="root path of the spectrogram data set",
)
parser.add_argument(
    "-c",
    "--colormap",
    type=str,
    default="viridis",
    help="matplotlib colormap used for spectrogram generation",
)
parser.add_argument(
    "-r",
    "--resolution",
    nargs=2,
    default=[1024, 192],
    type=int,
    metavar=("x", "y"),
    help="Target resolution of the generated spectrogram images (e.g., -r 896 128 )",
)


if __name__ == "__main__":
    args = parser.parse_args()

    # Container of the datasets folder structure
    dir_manager = DirectoryManager(args.path)

    # Read all sample files from "results" directory
    sample_files = SampleFileList(dir_manager)

    # Exclude spectrograms that are intended to be generated by a tx-rx-loop using a specific USRP
    sample_files = sample_files.get_wo_usrp_txrx_loop()

    # Create output folder
    output_dir = args.path / "spectrogram_results"
    output_dir.mkdir(parents=True, exist_ok=True)

    print("generate spectrogram images from signal sample files...")

    # Original code (this tries to process all files at once and can use too much memory)
    # make_spectrograms(
    #     sample_files=sample_files,
    #     png_resolution=Resolution(x=args.resolution[0], y=args.resolution[1]),
    #     colormap=args.colormap,
    #     auto_normalization=False,
    # )

    # Changed code: process in batches of 3 files, then move results into spectrogram_results/
    batch_size = 3
    total_files = len(sample_files)

    for i in tqdm(range(0, total_files, batch_size), desc="Processing spectrograms"):
        batch = sample_files[i : i + batch_size]
        try:
            # Generate spectrograms (wherever make_spectrograms normally writes them)
            make_spectrograms(
                sample_files=batch,
                png_resolution=Resolution(x=args.resolution[0], y=args.resolution[1]),
                colormap=args.colormap,
                auto_normalization=False,
            )

            # Move generated spectrograms to spectrogram_results folder, overwriting if needed
            for sample_file in batch:
                # Use sample_file.path (assuming that's the attribute storing original file path)
                generated_png = Path(sample_file.path).with_suffix(".png")
                if generated_png.exists():
                    target_png = output_dir / generated_png.name
                    if target_png.exists():
                        target_png.unlink()  # remove if already exists
                    shutil.move(str(generated_png), str(target_png))
        except Exception as e:
            print(f"Failed on batch starting at {i}: {e}")
